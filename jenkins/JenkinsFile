pipeline {
    agent any

    stages {
        stage('Execute unit tests') {
            parallel {
                    stage('Unit test backend') {
                    agent {
                        docker {
                            image 'snakee/golang-junit:1.21'
                            reuseNode true
                        }
                    }
                    steps {
                        dir('bugtracker-backend') {
                            sh '''
        export WORKSPACE=$(pwd)

        # Set writable Go cache directories
        export GOCACHE=$WORKSPACE/.cache/go-build
        export GOMODCACHE=$WORKSPACE/.cache/go-mod

        mkdir -p "$GOCACHE" "$GOMODCACHE"

        # Run tests and generate JUnit report
        go test -v ./... | tee result.log | go-junit-report > report.xml
        # generate coverage report
        go test -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html

        mkdir -p reports
        mv coverage.out reports/
    '''
                            junit 'report.xml'
                        }
                    }
                    post {
                        always {
                            junit 'bugtracker-backend/report.xml'
                            publishHTML target:[
                        reportDir: 'bugtracker-backend/reports',
                        reportFiles: 'coverage.html',
                        reportName: 'Backend Coverage Report'
                    ]
                        }
                    }
                    }
            }
        }

        stage('Unit test frontend') {
            agent {
                docker {
                    image 'node:20-alpine'
                    reuseNode true
                }
            }
            steps {
                dir('bugtracker-frontend') {
                    sh '''
                        npm ci
                        npm test
                        mkdir -p reports
                        mv coverage reports/
                    '''
                }
            }
            post {
                always {
                    junit 'bugtracker-frontend/test-results.xml'
                    publishHTML target:[
                        reportDir: 'bugtracker-frontend/reports/coverage',
                        reportFiles: 'index.html',
                        reportName: 'Frontend Coverage Report'
                    ]
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}